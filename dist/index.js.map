{"version":3,"sources":["api.ts","app.ts","index.ts"],"names":[],"mappings":";AAwCC,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxCD,MAAA,EAAA,EAAA,QAAA,UAGA,SAAsB,EAAY,EAAkB,GAqCnD,OAAA,EAAA,UAAA,OAAA,EAAA,YAnCK,IAEA,uEAA4B,KAAY,KAGxC,KAAE,UAAe,EAAA,QAAM,IAAI,GAAK,MAAM,QAAQ,OAAQ,IACtD,KAAE,GAAS,EAAK,WAAa,GAE1B,OAAA,EAAY,KAMrB,SAAS,EAAY,GACX,OAAA,GACD,IAAA,YACA,IAAA,cACI,MAAA,QACJ,IAAA,OACI,MAAA,OACJ,IAAA,OACA,IAAA,QACI,MAAA,OACJ,IAAA,OACI,MAAA,OACJ,IAAA,MACI,MAAA,MACJ,IAAA,oBACA,IAAA,sBACA,IAAA,SACI,MAAA,SACT,QACS,MAAA,WAnCb,QAAA,YAAA;;ACqBC,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxBD,MAAA,EAAA,EAAA,QAAA,YAEA,EAAA,QAAA,SAGM,EAAM,EAAA,UAKZ,SAAe,EAAa,EAAc,GAczC,OAAA,EAAA,UAAA,OAAA,EAAA,YAZK,IAAA,MAAE,GAAU,EACZ,EAAY,WAAW,EAAM,WAC7B,EAAW,WAAW,EAAM,UAE5B,GAAA,MAAM,IAAc,MAAM,GAE5B,YADA,EAAI,OAAO,KAAK,KAAK,yCAKnB,IAAA,QAAgB,EAAA,YAAY,EAAU,GAC1C,EAAI,KAAK,KAjBX,EAAI,IAAI,QAAS,GACjB,QAAA,QAAe;;ACDf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANA,MAAA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,OAEM,EAAO,KAEb,EAAA,QAAM,aAAa,CACjB,IAAK,EAAA,QAAG,aAAa,oBACrB,KAAM,EAAA,QAAG,aAAa,sBAErB,EAAA,SACA,OAPU","file":"index.js","sourceRoot":"../src","sourcesContent":["import axios from 'axios'\n\n// get weather status from DaskSky API \nexport async function get_weather(latitude: number, longitude: number): Promise<string> {\n  // prepare the url\n  let api_key = '94b94c1b80852a2bac43f4432546fea3'\n  let base = 'https://api.darksky.net/forecast'\n  let url = `${base}/${api_key}/${latitude},${longitude}`\n\n  // make request\n  let { data } = await axios.get(url).catch(console.log) || {}\n  let { icon } = data.currently || {}\n\n  return map_weather(icon)\n}\n\n// map icon from DarkSky to weather tag\n// available weather tags:\n// clear, rain, snow, wind, fog, cloudy, default\nfunction map_weather(icon?: string): string {\n  switch (icon) {\n    case 'clear-day':\n    case 'clear-night':\n      return 'clear';\n    case 'rain':\n      return 'rain'\n    case 'snow':\n    case 'sleet':\n      return 'snow'\n    case 'wind':\n      return 'wind'\n    case 'fog':\n      return 'fog'\n    case 'partly-cloudy-day':\n    case 'partly-cloudy-night':\n    case 'cloudy':\n      return 'cloudy'\n    default:\n      return 'default'\n  }\n}\n","import express from 'express'\nimport { Request, Response } from 'express'\nimport { get_weather } from './api'\n\n// setup routes\nconst app = express()\napp.get('/song', view_weather)\nexport default app\n\n// routes\nasync function view_weather(req: Request, res: Response) {\n  // parse GET query\n  let { query } = req\n  let longitude = parseFloat(query.longitude)\n  let latitude = parseFloat(query.latitude)\n\n  if (isNaN(longitude) || isNaN(latitude)) {\n    res.status(400).send('Latitude and longitude must be number')\n    return\n  }\n\n  // get weather status\n  let weather = await get_weather(latitude, longitude)\n  res.send(weather)\n}\n\n","import https from 'https'\nimport app from './app'\nimport fs from 'fs'\n\nconst port = 3001\n\nhttps.createServer({\n  key: fs.readFileSync('./ssl/server.key'),\n  cert: fs.readFileSync('./ssl/server.cert'),\n  // passphrase: fs.readFileSync('./ssl/passphrase.txt', 'utf-8')\n}, app)\n  .listen(port);\n"]}