{"version":3,"sources":["app.ts","index.ts"],"names":[],"mappings":";AAsCA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtCA,MAAA,EAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,UAIM,EAAM,EAAA,UAEZ,SAAsB,EAAY,EAAkB,GA8BpD,OAAA,EAAA,UAAA,OAAA,EAAA,YA5BM,IAEA,uEAA4B,KAAY,KAGxC,KAAE,UAAe,EAAA,QAAM,IAAI,GAAK,MAAM,QAAQ,OAAQ,IACtD,KAAE,GAAS,EAAK,WAAa,GAE1B,OAAA,IAGT,SAAe,EAAK,EAAc,GAiBlC,OAAA,EAAA,UAAA,OAAA,EAAA,YAfM,IAAA,MAAE,GAAU,EACZ,EAAY,WAAW,EAAM,WAC7B,EAAW,WAAW,EAAM,UAE5B,GAAA,MAAM,IAAc,MAAM,GAE5B,YADA,EAAI,OAAO,KAAK,KAAK,yCAInB,IAAA,QAAgB,EAAY,EAAU,GAC1C,EAAI,KAAK,KAzBX,QAAA,YAAA,EA4BA,EAAI,IAAI,QAAS,GAEjB,QAAA,QAAe;;ACzBf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAZA,MAAA,EAAA,EAAA,QAAA,UAGM,EAAO,IAEb,EAAA,QAAI,OAFS","file":"index.js","sourceRoot":"../src","sourcesContent":["import express from 'express'\nimport { Request, Response } from 'express'\nimport axios from 'axios'\nimport { isNumber } from 'util'\nimport { NextFunction } from 'connect'\n\nconst app = express()\n\nexport async function get_weather(latitude: number, longitude: number): Promise<string> {\n  // prepare the url\n  let api_key = '94b94c1b80852a2bac43f4432546fea3'\n  let base = 'https://api.darksky.net/forecast'\n  let url = `${base}/${api_key}/${latitude},${longitude}`\n\n  // make request\n  let { data } = await axios.get(url).catch(console.log) || {}\n  let { icon } = data.currently || {}\n\n  return icon\n}\n\nasync function song(req: Request, res: Response) {\n  // parse GET query\n  let { query } = req\n  let longitude = parseFloat(query.longitude)\n  let latitude = parseFloat(query.latitude)\n\n  if (isNaN(longitude) || isNaN(latitude)) {\n    res.status(400).send('Latitude and longitude must be number')\n    return\n  }\n\n  let weather = await get_weather(latitude, longitude)\n  res.send(weather)\n}\n\napp.get('/song', song)\n\nexport default app\n","import https from 'https'\nimport app from './app'\nimport fs from 'fs'\n\nconst port = 3000\n\napp.listen(port)\n\n// https.createServer({\n//   key: fs.readFileSync('./ssl/key.pem'),\n//   cert: fs.readFileSync('./ssl/cert.pem'),\n//   passphrase: fs.readFileSync('./ssl/passphrase.txt', 'utf-8')\n// }, app)\n//   .listen(port);\n"]}